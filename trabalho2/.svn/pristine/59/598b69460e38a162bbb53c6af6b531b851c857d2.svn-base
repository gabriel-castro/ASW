package sonc.battle;

import sonc.quad.HasPoint;

public abstract class MovingObject extends java.lang.Object implements HasPoint{

	private double speed;
	protected int status;
	private double heading;
	private double x;
	private double y;
	private double maxRotation = Math.PI/4;
	private double maxSpeed=2;
	private double maxSpeedChange;
	private Ship origin;
	
	void move(){
		this.x = speed * Math.cos(heading);
		this.y = speed * Math.sin(heading);
	}
	
	MovingObject(int status, double heading, double speed) {
		this.status = status;
		this.heading=heading;
		this.speed=speed;
	}
	
	protected double distanceTo(MovingObject other) {
		double d1 = Math.abs(this.x - other.x);
		double d2 = Math.abs(this.y - other.y);
		double result = Math.sqrt((d1*d1)+(d2*d2));
		return result;
	}

	void doChangeSpeed(double delta) {
		speed = speed + delta;
		if (speed>maxSpeed) {
			speed=maxSpeed;
		}
	}
	
	void doRotate(double angle) {
		if(angle>this.maxRotation) {
			heading = maxRotation;
		}else {
			heading = angle;	
		}
		heading = normalizeAngle(heading);
	}
	
	public abstract String getColor();

	public double getHeading() {
		this.heading = normalizeAngle(heading);
		return this.heading;
	}
	
	protected double headingTo(MovingObject other) {
		double ang = Math.atan2(other.y-this.y, other.x-this.x);
		if(ang < 0) ang += 2*Math.PI;
		return ang;
	}
	
	abstract int getImpactDamage();
	
	double getMaxRotation() {
		return maxRotation;
	}
	
	double getMaxSpeed() {
		return maxSpeed;
	}

	double getMaxSpeedChange() {
		return maxSpeedChange;
	}

	Ship getOrigin() {
		return origin;
	}
	
	public abstract int getSize();

	public double getSpeed() {
		return speed;
	}

	public int getStatus() {
		return status;
	}
	
	public double getX() {
		return this.x;
	}

	public double getY() {
		return this.y;
	}

	public void hitdBy(MovingObject other) {
		this.status -= other.getImpactDamage();
	}

	public boolean isDestroyed() {
		if(this.status <= 0) {
			return true;
		}
		return false;
	}

	protected double normalizeAngle(double heading) {
		while (heading < 0) 
			heading += 2*Math.PI;
		while (heading >= 2*Math.PI) 
			heading -= 2*Math.PI;
		return heading;
		
	}

	void setHeading(double heading) {
		while (heading < 0) 
			heading += 2*Math.PI;
		while (heading >= 2*Math.PI) 
			heading -= 2*Math.PI;
		this.heading = heading;
	}

	void setX(double x) {
		this.x = x;
	}

	void setY(double y) {
		this.y = y;
	}
	
	void updatePosition() {
		this.x = speed * Math.cos(heading);
		this.y = speed * Math.sin(heading);
	}
	
}

package sonc.client.GUI;

import java.util.ArrayList;
import java.util.List;

import com.google.gwt.canvas.client.Canvas;
import com.google.gwt.canvas.dom.client.Context2d;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.VerticalPanel;

import sonc.client.ManagerService;
import sonc.client.ManagerServiceAsync;
import sonc.shared.Movie;
import sonc.shared.Movie.Frame;
import sonc.shared.Movie.Oblong;

public class MovieArea extends Composite{
	private final ManagerServiceAsync managerService = GWT.create(ManagerService.class);
	VerticalPanel moviePanel = new VerticalPanel();
	Movie filme = new Movie();
	List<Frame> frames = new ArrayList<Frame>();
	List<String> nicks = new ArrayList<String>();
	Canvas canvas = Canvas.createIfSupported();;
	Context2d context;
	static final int canvasHeight = 300;
	static final int canvasWidth = 300;
	static final String divTagId = "canvasExample"; // must match div tag in html file

	//private Label MovieLabel = new Label();   

	public MovieArea(){
	    Canvas canvas = Canvas.createIfSupported();
	    Context2d context = canvas.getContext2d();

	    context.setFillStyle("#ff00ff");
	    context.setStrokeStyle("#ff00ff");

	    context.translate(canvas.getCoordinateSpaceWidth() / 2, canvas.getCoordinateSpaceHeight() / 2);
	    context.beginPath();
	    context.arc(0, 0, 2, 0, Math.PI * 2, true);
	    context.closePath();
	    context.stroke();
	    context.fill();
		
		/*
		canvas.getContext2d();
		nicks.add(LoginArea.username.getText());
		managerService.battle(nicks, new AsyncCallback<Movie>(){
			@Override
			public void onFailure(Throwable caught) {
				Window.alert(caught.toString());		
			}
			@Override
			public void onSuccess(Movie result) {
				filme = result;
				frames = filme.getFrames();
			}						
		});
		for(Frame f : frames) {			
			List<Oblong> obl = new ArrayList<Oblong>();
			obl =f.getOblongs();
			for(Oblong o : obl) {	
				context.setFillStyle(o.getColor());
				context.fillRect( o.getX(), o.getY(), o.getX() + o.getSize(), o.getY() + o.getSize());
			}			
		}*/
		moviePanel.add(canvas);
		initWidget(moviePanel);
	}



	/*
	if (canvas == null) {
		RootPanel.get().add(new Label("Sorry, your browser doesn't support the HTML5 Canvas element"));
		return;
	}

	canvas.setStyleName("mainCanvas");     // *** must match the div tag in CanvasExample.html ***
	canvas.setWidth(canvasWidth + "px");
	canvas.setCoordinateSpaceWidth(canvasWidth);

	canvas.setHeight(canvasHeight + "px");      
	canvas.setCoordinateSpaceHeight(canvasHeight);

	RootPanel.get( divTagId ).add(canvas);
	context = canvas.getContext2d();

	final Timer timer = new Timer() {           
		@Override
		public void run() {
			drawSomethingNew();
		}
	};
	timer.scheduleRepeating(1500);

	public void drawSomethingNew() {

        // Get random coordinates and sizing
        int rndX = Random.nextInt(canvasWidth);
        int rndY = Random.nextInt(canvasHeight);        
        int rndWidth = Random.nextInt(canvasWidth);
        int rndHeight = Random.nextInt(canvasHeight);

        // Get a random color and alpha transparency
        int rndRedColor = Random.nextInt(255);
        int rndGreenColor = Random.nextInt(255);
        int rndBlueColor = Random.nextInt(255);
        double rndAlpha = Random.nextDouble();

        CssColor randomColor = CssColor.make("rgba(" + rndRedColor + ", " 
                                             + rndGreenColor + "," + rndBlueColor + ", " + rndAlpha + ")");

        context.setFillStyle(randomColor);
        context.fillRect( rndX, rndY, rndWidth, rndHeight);
        context.fill();
    }
	 */
}
